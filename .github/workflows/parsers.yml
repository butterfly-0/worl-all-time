name: Run Private Parsers

on:
  workflow_dispatch:
    inputs:
      parser:
        description: 'Який парсер запускати (залиште порожнім для запуску всіх по черзі)'
        required: false
        default: ''
  schedule:
    - cron: '0 2 * * *'      # airing: щодня
    - cron: '0 3 1 * *'      # top_upcoming: раз на місяць
    - cron: '0 4 1 1,4,7,10 *' # mass_parser: раз на 3 місяці
    - cron: '0 5 */3 * *'    # update_newly_ukrainian: раз на 3 дні
    - cron: '0 6 1 1,4,7,10 *' # update_popularity_rank_alltime: раз на 3 місяці
    - cron: '0 7 */4 * *'    # playlist_parser: раз на 4 дні

jobs:
  run-parsers:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v3

      - name: Clone private repo
        env:
          TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          git clone https://butterfly-0:${TOKEN}@github.com/butterfly-0/collection-anime.git
          cd collection-anime
          git submodule update --init --recursive
          
      - name: Create .env from secrets
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> collection-anime/.env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> collection-anime/.env
          echo "PARSER_PROXY=${{ secrets.PARSER_PROXY }}" >> collection-anime/.env

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r collection-anime/Dr/Ani-Sites-Agregator/requirements.txt

      # === ОКРЕМІ КРОКИ ДЛЯ КОЖНОГО ПАРСЕРА ===

      - name: Run anitube_hikka
        if: github.event.inputs.parser == '' || github.event.inputs.parser == 'anitube_hikka'
        run: |
          cd collection-anime
          python -m new_parsers.runImports anitube_hikka

      - name: Run mass_parser
        if: github.event.inputs.parser == '' || github.event.inputs.parser == 'mass_parser'
        run: |
          cd collection-anime
          python -m new_parsers.anilist.mass_parser

      - name: Run top_season
        if: github.event.inputs.parser == '' || github.event.inputs.parser == 'top_season'
        run: |
          cd collection-anime
          python -m new_parsers.runImports top_season

      - name: Run top_upcoming
        if: github.event.inputs.parser == '' || github.event.inputs.parser == 'top_upcoming'
        run: |
          cd collection-anime
          python -m new_parsers.runImports top_upcoming

      - name: Run update_newly_ukrainian
        if: github.event.inputs.parser == '' || github.event.inputs.parser == 'update_newly_ukrainian'
        run: |
          cd collection-anime
          python -m new_parsers.anitube.update_newly_ukrainian

      - name: Run airing
        if: github.event.inputs.parser == '' || github.event.inputs.parser == 'airing'
        run: |
          cd collection-anime
          python -m new_parsers.runImports airing

      - name: Run playlist_parser
        if: github.event.inputs.parser == '' || github.event.inputs.parser == 'playlist_parser'
        run: |
          cd collection-anime
          python -m new_parsers.playlist_parser

      - name: Check playlist_parser progress and rerun if needed
        if: github.event.inputs.parser == '' || github.event.inputs.parser == 'playlist_parser'
        run: |
          cd collection-anime
          python3 -c "import json; p=json.load(open('new_parsers/progress/progress_playlist_parser.json')); print(p.get('last_index', 0), '/', len(json.load(open('data/playlist_parser_result.json'))))" || echo 'No progress file yet.'
          # Якщо не завершено, тригеримо rerun через GitHub API (псевдокод, замінити на робочий curl)
          if [ -f new_parsers/progress/progress_playlist_parser.json ]; then \
            total=$(jq length data/playlist_parser_result.json 2>/dev/null || echo 0); \
            done=$(jq .last_index new_parsers/progress/progress_playlist_parser.json 2>/dev/null || echo 0); \
            if [ "$done" -lt "$total" ]; then \
              echo 'Rerun workflow for playlist_parser'; \
              curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ github.workflow }}/dispatches \
                -d '{"ref":"${{ github.ref }}","inputs":{"parser":"playlist_parser"}}'; \
            fi; \
          fi

      - name: Run update_popularity_rank_alltime
        if: github.event.inputs.parser == '' || github.event.inputs.parser == 'update_popularity_rank_alltime'
        run: |
          cd collection-anime
          python -m new_parsers.anitube.update_popularity_rank_alltime